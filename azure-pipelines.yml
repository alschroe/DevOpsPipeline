# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - master
  
pool:
  vmImage: 'windows-latest'
  
variables:
  buildConfiguration: 'Release'
  
steps:  
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'  #I am using a Windows agent. I will not need to install a .Net Core runtime but here I install a newer SDK version.
  inputs:
    version: 5.0.x
    performMultiLevelLookup: true
    includePreviewVersions: true # Required for preview versions

- task: DotNetCoreCLI@2
  displayName: Restore #Restore all NuGet packages used in the application
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-vsts-feed' # A series of numbers and letters

- task: DotNetCoreCLI@2 
  displayName: Build #Build .NET Core project
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need
  
- task: DotNetCoreCLI@2
  displayName: Publish #After the App is build, the build output can be uploaded to Azure Pipelines. Here we package the build output into a .zip file to be deployed to web application.
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: ' $(Build.SourcesDirectory)/template.json'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs: #upload all the build files into an artifact of the build
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'